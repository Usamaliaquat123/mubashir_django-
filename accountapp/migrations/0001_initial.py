# Generated by Django 3.2.5 on 2021-12-24 20:02

import accountapp.models
import autoslug.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import select2.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('mobile', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('zipcode', models.CharField(blank=True, max_length=255, null=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('yourself', models.TextField(blank=True, null=True)),
                ('bg_check', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='users/images/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['JPG', 'JPEG', 'PNG', 'jpg', 'jpeg', 'png'])])),
                ('video', models.FileField(blank=True, null=True, upload_to='users/videos/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])])),
                ('available', models.BooleanField(default=False)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('IsProComplete', models.BooleanField(default=False)),
                ('IsProCompleteStatus', models.CharField(choices=[('Register', 'Register'), ('Contact', 'Contact'), ('Category', 'Category'), ('Schedule', 'Schedule'), ('Video', 'Video'), ('Image', 'Image'), ('Complete', 'Complete')], default='Register', max_length=15)),
                ('IsVerified', models.BooleanField(default=False)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('device_id', models.TextField(blank=True, null=True)),
                ('devicetoken', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('object', accountapp.models.UserManager()),
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='name', unique=True)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=55, unique=True)),
                ('code', models.CharField(max_length=5, unique=True)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'Language',
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('productid', models.CharField(blank=True, max_length=55, null=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('period', models.CharField(choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('half-yearly', 'Half Yearly'), ('yearly', 'Yearly')], default='monthly', max_length=55)),
                ('amount', models.IntegerField()),
                ('info', models.TextField(blank=True, null=True)),
                ('unlimited', models.BooleanField(default=True)),
                ('noofjob', models.IntegerField(blank=True, null=True)),
                ('noofrequest', models.IntegerField(blank=True, null=True)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('createdBy', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='plan_created_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plan',
                'verbose_name_plural': 'Plans',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('code', models.CharField(blank=True, max_length=255, null=True)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='name', unique=True)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountapp.category')),
            ],
            options={
                'verbose_name': 'Sub Category',
                'verbose_name_plural': 'Sub Categories',
            },
        ),
        migrations.CreateModel(
            name='UserProfileView',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('viewby', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile_view_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile View',
                'verbose_name_plural': 'User Profile Views',
            },
        ),
        migrations.CreateModel(
            name='UserCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountapp.category')),
                ('subcategory', models.ManyToManyField(blank=True, null=True, to='accountapp.Subcategory')),
                ('user', select2.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Category',
                'verbose_name_plural': 'User Categories',
            },
        ),
        migrations.CreateModel(
            name='TemporaryPassword',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('device_id', models.CharField(blank=True, max_length=255, null=True)),
                ('password', models.CharField(max_length=6)),
                ('isUsed', models.BooleanField(default=False)),
                ('isExpired', models.BooleanField(default=False)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Temporary Password',
                'verbose_name_plural': 'Temporary Passwords',
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('period', models.CharField(blank=True, choices=[('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('half-yearly', 'Half Yearly'), ('yearly', 'Yearly')], max_length=55, null=True)),
                ('stripeid', models.CharField(blank=True, max_length=255, null=True)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255, null=True)),
                ('cancel_at_period_end', models.BooleanField(default=False)),
                ('membership', models.BooleanField(default=False)),
                ('unlimited', models.BooleanField(default=True)),
                ('startdate', models.DateField(blank=True, null=True)),
                ('enddate', models.DateField(blank=True, null=True)),
                ('noofjob', models.IntegerField(blank=True, null=True)),
                ('noofrequest', models.IntegerField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('expired', models.BooleanField(default=False)),
                ('recurring', models.BooleanField(default=True)),
                ('status', models.CharField(choices=[('Old', 'Old'), ('Current', 'Current')], default='Current', max_length=10)),
                ('payment_amount', models.IntegerField(blank=True, null=True)),
                ('payment_type', models.CharField(choices=[('Online', 'Online'), ('Offline', 'Offline')], default='Offline', max_length=55)),
                ('payment_status', models.CharField(choices=[('Success', 'Success'), ('Fail', 'Fail'), ('Pending', 'Pending')], default='Pending', max_length=55)),
                ('payment_response', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('canceldate', models.DateTimeField(blank=True, null=True)),
                ('cancel_response', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('createdBy', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscrption_created_by', to=settings.AUTH_USER_MODEL)),
                ('plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accountapp.plan')),
                ('user', select2.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Subscription',
                'verbose_name_plural': 'Subscriptions',
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('sun', models.BooleanField(default=False)),
                ('sun_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('sun_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('sun_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('sun_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('mon', models.BooleanField(default=False)),
                ('mon_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('mon_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('mon_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('mon_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('tue', models.BooleanField(default=False)),
                ('tue_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('tue_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('tue_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('tue_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('wed', models.BooleanField(default=False)),
                ('wed_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('wed_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('wed_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('wed_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('thu', models.BooleanField(default=False)),
                ('thu_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('thu_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('thu_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('thu_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('fri', models.BooleanField(default=False)),
                ('fri_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('fri_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('fri_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('fri_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('sat', models.BooleanField(default=False)),
                ('sat_start_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('sat_start_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('sat_end_hr', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)], null=True)),
                ('sat_end_ap', models.CharField(blank=True, choices=[('AM', 'AM'), ('PM', 'PM')], max_length=10, null=True)),
                ('part_time', models.BooleanField(default=False)),
                ('full_time', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('Old', 'Old'), ('Current', 'Current')], default='Current', max_length=10)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True)),
                ('createdBy', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='schedule_created_by', to=settings.AUTH_USER_MODEL)),
                ('user', select2.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('message', models.TextField()),
                ('isRead', models.BooleanField(default=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('createdBy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_created_by', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Newsletter',
                'verbose_name_plural': 'Newsletters',
            },
        ),
        migrations.CreateModel(
            name='ContactUs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254, verbose_name='email address')),
                ('phone', models.CharField(max_length=255)),
                ('message', models.TextField(blank=True, null=True)),
                ('ipaddress', models.GenericIPAddressField(blank=True, null=True)),
                ('source', models.CharField(choices=[('IOS', 'IOS'), ('Android', 'Android'), ('Web', 'Web')], default='Web', max_length=10)),
                ('browserinfo', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('user', select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contact Us',
                'verbose_name_plural': 'Contact Us',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4)),
                ('name', models.CharField(max_length=255)),
                ('publish', models.BooleanField(default=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accountapp.state')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
            },
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('message', models.TextField()),
                ('isRead', models.BooleanField(default=False)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('updatedAt', models.DateTimeField(auto_now=True, null=True)),
                ('createdBy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='admin_notification_created_by', to=settings.AUTH_USER_MODEL)),
                ('readBy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admin Notification',
                'verbose_name_plural': 'Admin Notifications',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accountapp.city'),
        ),
        migrations.AddField(
            model_name='user',
            name='createdBy',
            field=select2.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_created_by', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='language',
            field=models.ManyToManyField(blank=True, null=True, to='accountapp.Language'),
        ),
        migrations.AddField(
            model_name='user',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accountapp.state'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
